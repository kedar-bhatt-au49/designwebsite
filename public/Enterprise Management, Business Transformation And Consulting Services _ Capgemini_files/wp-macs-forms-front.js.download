const { __, _x, _n, _nx } = wp.i18n;
var MF_CONFIG = {};

/***********************************************************
DO NOT DELETE THIS SECTION
THIS IS USED SPECIFICALLY TO GENERATE TRANSLATIONS FORCEFULLY
************************************************************/
let translationValues = [
  __("No results found", "wp-macs-forms"),
];

jQuery(document).ready(function ($) {

  var country_dpo;
  var country_dpo_field;

  if($('.conditional_logic').length > 0 ){
    $('.conditional_logic').each(function (){
      country_dpo_field = $('.mf_form_fields_country_dpo_field').val();
    });
  }

  /**
   * MAIN PROPER FORMS CONTROLLER
   */
   $('.mf_form__form').each(function () {
     var idofform = $(this).attr('id').replace('mf_form_','').split('_');
     var form_id_r= idofform[0];
     MF_CONFIG[form_id_r] =  {"errors":[],"redirect":""};
       $(this)[0].reset();
   })
  var MacsForms = new function (e) {

    var self = this

    self.field = ''
    self.formElement = ''
    self.formSuccessBox = ''
    self.formErrorBox = ''
    self.formWrapper = ''


    self.init = function ($formEl) {

      self.formElement = $formEl
      self.formName = $( '.mf_form__title', $formEl ).val()
      self.formId = $('input.mf_form__id', $formEl).val()

      // -------------------------------------------------------------------------------
    /**
     * Process conditional logic on form elements
     */

    self.conditional_logic = $('.conditional_logic', $formEl).val();

    if(self.conditional_logic !== ''){
      self.condition_logic_obj = JSON.parse( self.conditional_logic );

      self.condition_logic_obj.forEach(function(value, index, array){

        if(value.name.length === 0){
          return;
        }

        value.target_field.forEach(function(target__field, target_index, target_arr){
          jQuery('div*[class^="mf-field"]').each(function(){

            if(jQuery(this).find(`#${target__field}`).length > 0 || jQuery(this).find(`[for=${target__field}]`).length > 0 || jQuery(this).find(`[name=${target__field}]`).length > 0){
              jQuery(this).hide();
              if(jQuery(this).find(`#${target__field}, [name=${target__field}]`).attr('required')){
                jQuery(this).find(`#${target__field}, [name=${target__field}]`).removeAttr('required');
                jQuery(this).find(`#${target__field}, [name=${target__field}]`).attr('apply-required', true);
              }
            }
          });
          jQuery('div.mf_field').each(function(){

            if(jQuery(this).find(`#${target__field}`).length > 0 || jQuery(this).find(`[for=${target__field}]`).length > 0 || jQuery(this).find(`[name=${target__field}]`).length > 0){
              jQuery(this).hide();
              if(jQuery(this).find(`#${target__field}, [name=${target__field}]`).attr('required')){
                jQuery(this).find(`#${target__field}, [name=${target__field}]`).removeAttr('required');
                jQuery(this).find(`#${target__field}, [name=${target__field}]`).attr('apply-required', true);
              }
            }
          });
        })
      });
    }


      self.bindFileUploads()
      self.bindSubmit()
      if (typeof jQuery('select2') !== 'undefined') {
        self.selectDropdown()
      }
    }

    //------------------------------------------------------------------------------------
    /**
     * Conditional logic change events
     *
     */
    if($('.conditional_logic').length > 0 &&  $('.conditional_logic').val() !== ''){
      jQuery('select').change(function(){
        this_field = '';
        this_value = '';
        if(typeof(jQuery(this).val()) === 'object'){
          this_value = (jQuery(this).val()[0] !== '' && jQuery(this).val()[0] !== undefined) ? jQuery(this).val()[0].toLowerCase() : '';
        }else{
          this_value = jQuery(this).val() ;
        }

        this_field = jQuery(this).closest().prevObject[0].name;
        if(this_field.indexOf('[]') !== -1){
          this_field = this_field.replace('[]', '');
        }
        myForm = $(this).closest('.mf_form__form');
        apply_conditional_logic(this_value, this_field, myForm);
      });

      jQuery('.form-check-input').click(function(){
        this_field = '';
        this_value = '';
        this_value = jQuery(this).val().toLowerCase();
        this_field = jQuery(this).closest().prevObject[0].name;
        myForm = $(this).closest('.mf_form__form');
        apply_conditional_logic(this_value, this_field, myForm);
      });
    }


    //--------------------------------------------------------------------------------------

    /**
     * Function: Apply conditional logic
     * @param {*} this_value 
     * @param {*} this_field 
     * @param {*} myForm 
     */
    function apply_conditional_logic(this_value, this_field, myForm){
      condition_logic_string = myForm.find('.conditional_logic').val();
      nested_condition_array = [];
      this_value = this_value.toLowerCase();
      if(condition_logic_string !== ''){
        self.condition_logic_obj = JSON.parse( condition_logic_string );

        self.condition_logic_obj.forEach(function(val, idx, arr){
          if(val.name === this_field){
            nested_condition_array.push(val.action_value.toLowerCase());
          }
        });
        self.condition_logic_obj.forEach(function(value, index, array){

        if(value.name.lenght == 0){
          return;
        }

        if(this_field === value.name[0] && value.action_value.indexOf(this_value) !== -1){
          
          index = value.action_value.indexOf(this_value);
          action_value = value.action_value[index].toLowerCase();  
          
          target_field = jQuery(`#${value.target_field[index]}, [name=${value.target_field[index]}]`); 
          this_field_type = jQuery(`#${this_field[index]}, [name=${this_field[index]}]`).attr('type');         
          target_field_type = target_field.attr('type');  
          target_field_action = value.target_field_action[0];
          target_field_parent = target_field.parents(); 
          target_field_default =  value.target_field_default[0]; 
          
          if(target_field_action == 'show'){            
            jQuery(`[for=${value.target_field[index]}]`).show();

            this_field_data_parent = jQuery(`#${this_field}, [name=${this_field}]`).attr('data-parent');

             if(this_field_data_parent === '' || this_field_data_parent === undefined){
               jQuery(target_field).attr('data-parent', this_field);
             }else{
               new_parent = `${this_field_data_parent},${this_field}`;
               jQuery(target_field).attr('data-parent', new_parent);
             }
             
             target_field_parent.each(function(){              
               if(jQuery(this).hasClass('mf-field-wrapper') || jQuery(this).hasClass('mf_field--country') || jQuery(this).hasClass('mf_field--multiselect') || jQuery(this).hasClass('mf_field--submit')){                
                 jQuery(this).show();
                 
               }
             });
              hide_fields(value.target_field, this_field, index);
              
         }
        }else if(this_field === value.name[0] && value.action_value.indexOf(this_value) === -1){
          hide_fields(value.target_field, this_field, index);
          hide_by_name(value.target_field, this_field, index, value.action_value, this_value); 
          hide_all_child_fields(array, this_field, index, this_value);        
        }
        else if(this_field === value.name[0] && this_value === ''){

          hide_all_child_fields(array, this_field, index, this_value);

        }else{

         hide_all_child_fields(array, this_field, index, this_value);

        }

        });
      }
    }

    //--------------------------------------------------------------------------
     /**
     * Function: Hide fields which value have not any condition
     * @param {*} array 
     * @param {*} this_field 
     * @param {*} index 
     */
     function hide_by_name(array, this_field, index, action_value, field_val){
      array.forEach(function(val, key, arr){
        if(action_value.indexOf(field_val) === -1){
          target__field = jQuery(`#${val}, [name=${val}]`);
          target__field__parent = target__field.parents();
          target__field__parent.each(function(){
            if(jQuery(this).hasClass('mf-field-wrapper') || jQuery(this).hasClass('mf_field--country') || jQuery(this).hasClass('mf_field--multiselect') || jQuery(this).hasClass('mf_field--submit')){
              jQuery(this).hide();
            }
          });          
        }
      });
    }

    //--------------------------------------------------------------------------

    /**
     * Function: Hide simple logic fields
     * @param {*} array 
     * @param {*} this_field 
     * @param {*} index 
     */
    function hide_fields(array, this_field, index){
      array.forEach(function(val, key, arr){
        if(key !== index){
          target__field = jQuery(`#${val}, [name=${val}]`);
          target__field__parent = target__field.parents();
          target__field__parent.each(function(){
            if(jQuery(this).hasClass('mf-field-wrapper') || jQuery(this).hasClass('mf_field--country') || jQuery(this).hasClass('mf_field--multiselect') || jQuery(this).hasClass('mf_field--submit')){
              jQuery(this).hide();
            }
          });          
        }
      });
    }

    //---------------------------------------------------------------------------------------

    /**
     * Function: Hide nested logic fields
     * @param {*} array 
     * @param {*} this_field 
     * @param {*} index 
     */
    function hide_all_child_fields(array, this_field, index, field_val){       
      parent_array = [];     
      array.forEach(function(val, key, arr){       
        incremented_val =  arr[key + 1];         
        if(incremented_val === undefined || incremented_val.target_field === undefined || incremented_val.name.indexOf(this_field) !== -1){
          return;
        }
       
        incremented_val.target_field.forEach(function(value, index, target_array){
          target__field = jQuery(`#${value}, [name=${value}]`); 
          if(target__field.attr('data-parent')){
            target__field_parents = target__field.attr('data-parent');            
            if(target__field_parents !== '' && target__field_parents !== undefined){

              if(target__field_parents.indexOf(',') === -1){
                if(parent_array.indexOf(target__field_parents) === -1){
                  parent_array.push(target__field_parents);
                }                
                
              }else{
                parent_array = target__field_parents.split(',');                
              }
              
              if(parent_array.indexOf(this_field) === -1){
                
                return;
              }
              
              if(parent_array.indexOf(this_field) !== -1){
                target__field__parents = target__field.parents();
                target__field__parents__count = parent_array.length;                
                if(target__field__parents__count > 1){
                  target__field__parents.each(function(){                  
                    if(jQuery(this).hasClass('mf-field-wrapper') || jQuery(this).hasClass('mf_field--country') || jQuery(this).hasClass('mf_field--multiselect') || jQuery(this).hasClass('mf_field--submit')){
                        
                        jQuery(this).hide();                
                    }
                  })
                }
              
              }
             
            }
          }
        });

         //-------------------------------------------------------------
         if(field_val === ''){
                    
          incremented_val.name.forEach(function(value, index, target_array){                    
            target__field = jQuery(`#${value}, [name=${value}]`);    
                   
            if(target__field.attr('data-parent') !== undefined){
             target__field_parents = target__field.attr('data-parent');                             
              if(target__field_parents !== '' && target__field_parents !== undefined){
                if(target__field_parents.indexOf(',') === -1){
                  if(parent_array.indexOf(target__field_parents) === -1){
                    parent_array.push(target__field_parents);
                  }                

                }else{
                  parent_array = target__field_parents.split(',');                
                }

                if(parent_array.indexOf(this_field) === -1){

                  return;
                }

                if(parent_array.indexOf(this_field) !== -1){
                  target__field__parents = target__field.parents();
                  target__field__parents__count = parent_array.length;                
                  if(target__field__parents__count > 1){
                    target__field__parents.each(function(){                  
                      if(jQuery(this).hasClass('mf-field-wrapper') || jQuery(this).hasClass('mf_field--country') || jQuery(this).hasClass('mf_field--multiselect') || jQuery(this).hasClass('mf_field--submit')){

                          jQuery(this).hide();                
                      }
                    })
                  }

                }

              }
            }
          });
        }
      //-------------------------------------------------------------
        
      });
    }

   //---------------------------------------------------------------------------------------

    /**
     * Process file uploads asynchronously
     * The file should be uploaded immediately after being selected by user and store as encrypted blob
     * It will be marked as draft in WP and deleted if the submission is not sent successfully
     * After successful form submission file post will get published and binded to submission post.
     */
    self.bindFileUploads = function () {
      var fileFields = self.formElement.find('.mf_field--file')

      fileFields.each(function () {
        var upload = new MFFileUpload()
        upload.init($(this))
      })
    }

    /**
     * Proccess form on submit
     */
    self.bindSubmit = function () {
      // add error validation after click submit button
      var myForm

      self.formElement.find('.mf_field--submit').on('click', function () {
        myForm = $(this).closest('.mf_form__form');
//        myForm.find('.mf-required input, .mf-required textarea, .mf_field select, .mf_field ul li radio, .mf_fileupload_callback_id').focus().focusout()
        myForm.find('.mf_field input, .mf_field textarea, .mf_field select, .mf_field ul li radio, .mf_fileupload_callback_id').each(function () {
          if (MFValidator.init($(this)) === false) {
            var check = MFValidator.init($(this));
          }
        })
      })

      // Submit form
      self.formElement.submit(function (e) {
        e.preventDefault()

        var hasErrors = 0
        myForm = $(this).closest('.mf_form__form');
        // Validate all fields again on submit
        myForm.find('.mf_field input, .mf_field textarea, .mf_field select, .mf_field ul li radio, .mf_fileupload_callback_id').each(function () {
          if (MFValidator.init($(this)) === false) {
            hasErrors = 1
          }
        })

        if (hasErrors) {
          return
        }

        if ( ! myForm[0].checkValidity() ) {
          var currentForm = $(myForm).closest('.mf_form__form').attr('id'); 
          var slider = $('.mf_field--submit').find('#slider');
          slider.removeAttr('style');
          slider.css('left', '-10px;')          
          setTimeout(() => {             
            $('.arrow-icon').removeClass('d-none'); // Hide the arrow icon
            $('.tick-icon').addClass('d-none'); // Show the tick mark icon
            $('.arrow-icon').text('');            
            slider.removeClass('submitted');
          }, "10");
          var slide_txt =  $(`#${currentForm}`).find('#submit_btn_txt').val();        
          $(`#${currentForm}`).find('#button-background > .slide-text').text(slide_txt); 

          return false;
        }

        var i = 0   

        var data = {
          action: 'mf_submit_form',
          nonce_mf_submit: MF.ajaxNonce,          
          form_data: {}
        }

        var fields = myForm.find(':input', $(this)).serializeArray()

        $.each(fields, function (i, field) {
          // skip undefined
          if (!field.name) {
            return
          }

          // treat multiple inputs with same names[] as array of values, similar to PHP
          if (field.name.slice(-2) === '[]') {
            var realName = field.name.slice(0, -2)

            if (Array.isArray(data.form_data[ realName ])) {
              data.form_data[ realName ].push(field.value)
            } else {
              data.form_data[ realName ] = [ field.value ]
            }
          } else { // singular values
            data.form_data[ field.name ] = field.value
          }


        })

        if(country_dpo_field !== ''){          
          country_dpo = $(`#${country_dpo_field}`).val();
        }

        if(country_dpo !== ''){
          const emailRegex =  new RegExp(/^[A-Za-z0-9_!#$%&'*+\/=?`{|}~^.-]+@[A-Za-z0-9.-]+$/, "gm");
          isValidEmail = emailRegex.test(country_dpo);
            if(isValidEmail){             
              data.country_dpo = country_dpo;
            }else{
              data.country_dpo = '';
            }
        }

        data.form_data = JSON.stringify(data.form_data)
        var formToHide = document.getElementById(myForm.attr('id'));
        $(formToHide).hide();

        $.ajax({
          url: MF.ajaxURL,
          xhrFields: { withCredentials: true},
          method: 'post',
          action: 'mf_submit_form',
          nonce_mf_submit: MF.ajaxNonce,
          data: data
        }).done(function (response) {
          if (!response.success) {
            self.onFailure()

            return
          }

          self.onSuccess( response.data, myForm.attr('id') )
          //$('html, body').animate({scrollTop: $('.mf_forms__container.container').offset().top -100 }, 'slow');
          if(!$(formToHide).parents('.modal').length) {
            $('html, body').animate({scrollTop: $(formToHide).parents('section').offset().top + $(formToHide).parents('section').innerHeight() - 500 }, 'slow');
          }

        }).fail(function (response ) {
          self.onFailure( response.data, response.responseJSON.data, myForm.attr('id') );
          $(formToHide).show();

        })
      })
    }

    // selec2 for select dropdowns
    self.selectDropdown = function () {
      var selects = self.formElement.find('select')

      selects.each(function () {
        $(this).select2({
          dropdownParent: self.formElement,
          width: 'style'
        })
      })

      selects.attr('aria-hidden', false)
      $('.select2').attr('aria-hidden', true)

      selects.on('select2:open', function (e) {
        iconSearch = $('<i />', { 'class': 'icon-ios-search-strong', 'aria-hidden': 'true' })
        $('.select2-search__field', self.formElement).attr('placeholder', __('Search', 'wp-macs-forms'))
        $('.select2-search--dropdown', self.formElement).append(iconSearch)
      })

      self.formElement.on('click', '.select-clear', function (e) {
        e.preventDefault()
        var $select = $(this).parents('.mf_field').find('select')
        $select.val($select.find('option:first').attr('value')).change()
        $select.select2('close')
        $(this).remove()
      })
    }

     configMF = function(form_ID) {

      if(form_ID !== 'undefined' && form_ID !== ''){
        var current_form_id = $(`#${form_ID}`).find('input[name=form_id]').val(); 
      }else{
        var current_form_id = $('input[name=form_id]').val()
      }

      var configValue =eval(`MF_CONFIG`+current_form_id);
      var config  = configValue[current_form_id];

      return config

    }

    /**
     * After succesful submission
     */
    self.onSuccess = function (data, formID) {

      var formToHide = document.getElementById(formID);

      this.formSuccessBox = $(formToHide).siblings('.mf_form__success')
      this.formErrorBox = $(formToHide).siblings('.mf_form__errors')

      var formRedirect = configMF( formID  );

      if  ( typeof formRedirect !== 'undefined' && typeof formRedirect.redirect !== 'undefined' && formRedirect.redirect.length ) {

        this.formSuccessBox.hide()
        self.redirect(formRedirect.redirect)

      } else {

        $(formToHide).hide()
        this.formErrorBox.hide()
        this.formSuccessBox.show()

        var slider = $('.mf_field--submit').find('#slider');
        slider.removeAttr('style');
        slider.css('left', '-10px;')          
        setTimeout(() => {             
          $('.arrow-icon').removeClass('d-none'); // Hide the arrow icon
          $('.tick-icon').addClass('d-none'); // Show the tick mark icon
          $('.arrow-icon').text('');            
          slider.removeClass('submitted');
        }, "10");
        var formTitleElem1 = $(formToHide).parent().children('.form_title');
        $(formTitleElem1).hide();
		
		$('.form-title').hide();
		$('.formHelpText').hide();
		$('.formparaText').hide();
    }

      self.sendAnalyticsData()

    }

    /**

     * After submission fail
     */
    self.onFailure = function (data, captchaResponse, formID) {

      var formToHide = document.getElementById(formID);

      this.formSuccessBox = $(formToHide).siblings('.mf_form__success')
      this.formErrorBox = $(formToHide).siblings('.mf_form__errors')

      mf_form_field_spam_entry = $('#mf_form_field_validate').val();

      this.formSuccessBox.hide()

      if (captchaResponse !== null ) {
        this.formErrorBox.text(captchaResponse).css('color', 'red')
      }

      this.formErrorBox.show()
    }

    self.sendAnalyticsData = function() {
      window.dataLayer = window.dataLayer || [];
      window.dataLayer.push( {
        'event'    : 'FormSubmission',
        'formID'   : self.formId,
        'formTitle' : self.formName,
      } );

      //Piano specific datalayer event
      window.dataLayer.push({
          "event": "form.submit",
          "form_name": self.formName,
          "form_id": self.formId,
      });
    }

    self.redirect = function(redirectUrl) {

    window.location.href = redirectUrl

    }

  }()

  /**
   * AJAX FILE UPLOAD FIELDS CONTROLLER
   */
  function MFFileUpload () {
    var self = this

    // Field wrapper element
    self.parent = ''

    // File input to proccess
    self.input = ''

    // WP Ajax url with callback action query string
    self.ajaxURL = MF.ajaxURL + '?action=mf_fileupload'

    // Parent MACS Form Form ID - to retrieve field settings from
    self.formId = ''

    // MACS Forms field ID
    self.fieldId = ''

    // WP Nonce
    self.nonce = ''

    // Hidden input to update with file ID after successful upload to WP
    self.wpFileInput = ''

    self.init = function ($fieldEl) {
      // Populate properties
      self.parent = $fieldEl
      self.fileInfo = $fieldEl.find('.mf_field_info')
      self.loadingIcon = $fieldEl.find('.mf-loading-icon')
      self.button = $fieldEl.find('.mf_fileupload_btn')
      self.input = $fieldEl.find('input[type="file"]')
      self.nonce = $fieldEl.find('input.mf_fileupload_nonce').val()
      self.wpRestNonce = $fieldEl.closest('form').find('.mf_form__wp_rest_nonce').val()
      self.formId = $fieldEl.closest('form').find('input.mf_form__id').val()
      self.fieldId = self.input.attr('id')
      self.wpFileInput = $fieldEl.find('input.mf_fileupload_callback_id')

      // Kick it off
      self.bindUploadClicks()
    }

    self.bindUploadClicks = function () {
      self.button.off().on('click', function (e) {
        e.preventDefault()
        self.input.click()
      });

      self.input.on('change', function (e) {
        // no file selected, do nothing
        if (!self.input[0] || !self.input[0].files || !self.input[0].files.length) {
          return
        }

        self.prepare()
      })
    }

    self.prepare = function () {
      var file = self.input[0].files
      var uploadData = new FormData()

      self.parent.find('.mf_error').remove()

      uploadData.append('form_id', self.formId)
      uploadData.append('field_id', self.fieldId)
      uploadData.append('nonce', self.nonce)

      $.each(file, function (key, value) {
        uploadData.append('file_' + self.fieldId, value)
      })

      self.uploadFile(uploadData)
    }

    self.uploadFile = function (uploadData) {

      self.parent.find( '.mf-file-size-error' ).remove();

      $.ajax({
        url: self.ajaxURL,
        type: 'POST',
        data: uploadData,
        cache: false,
        dataType: 'json',
        processData: false,
        contentType: false,
        xhrFields: {
          withCredentials: true
        },
        beforeSend: function (jqXhr) {
          self.loadingIcon.removeClass( 'd-none' );
        },
        success: function (result, textStatus, jqXHR) {

          self.loadingIcon.addClass( 'd-none' );

          if (!result.data || !result.success || !result.data.file_post_id || !result.data.file_data) {
            self.fail(result.data)
            return
          }
          self.success(result.data)
        }
      })
    }

    self.fail = function (data) {
      var $error = $('<span>', { class: 'mf_error mf-file-size-error', text: data });

      $error.insertAfter( self.fileInfo ); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.insertAfter

      // self.button.text(MF.strings.select_file);

      self.reset();
    }

    self.reset = function () {
      self.parent.find('.mf_fileupload__uploaded').remove()
      self.wpFileInput.val('')
      self.input.val('')
      self.button.text(MF.strings.select_file)
      self.enable()
    }

    self.disable = function () {
      self.input.prop('disabled', true)
      self.parent.addClass('mf_disabled')
    }

    self.enable = function () {
      self.input.prop('disabled', false)
      self.parent.removeClass('mf_disabled')
    }

    /**
     * Adds WP file post ID back to the form
     * Shows uploaded file name to user
     * Disables the field until the file is removed
     */
    self.success = function (result) {
      self.wpFileInput.val(result.file_post_id)
      self.appendUploaded(result.file_data)
      self.button.text(MF.strings.file_selected)
      self.disable()
    }

    /**
     * Appends HTML with uploaded file name and removal link
     */
    self.appendUploaded = function (fileData) {

      var removeEl = $('<button/>').text(MF.strings.remove_file).addClass('mf_fileupload__remove')
      var uploadedInfo = $('<p/>').addClass('mf_fileupload__uploaded')
      removeEl.appendTo(uploadedInfo)
      self.fileInfo.after(uploadedInfo) // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.after

      removeEl.on('click', function () {
        self.reset();
      })
    }
  }

  /**
   * PROPER FORMS VALIDATOR
   */
  var MFValidator = new function () {
    var self = this

    self.field = ''
    self.parent = ''
    self.formEl = ''
    self.fieldType = ''
    self.fieldValue = ''
    self.hasErrors = 0

    self.init = function ($fieldEl) {
      // Bail out early if globals from localized scripts are not present
      if (!MF_CONFIG || !MF) {
        return
      }

      self.field = $fieldEl
      self.parent = $fieldEl.closest('.mf_field')
      self.formEl = $fieldEl.closest('.mf_form')
      self.validationType = self.parent.data('validate')

      self.cleanErrors()

      self.getFieldValue()

      return self.validate()

    }

    self.validate = function () {

//      if ( 'undefined' === typeof self.field || null === self.field ) {
//        return true;
//      }
//
//      if ( self.field.hasClass( 'select2-search__field' ) ) {
//        return true;
//      }
//
//      if ( self.validationType === 'multiselect' ) {
//
//        if ( self.isRequired() && self.fieldValue.length === 0 ) {
//          self.hasErrors = 1
//          self.outputError(MF.strings.required_error)
//          return false
//        }
//
//      } else {
//        // check if required fields are filled before even trying to check values
//        if (self.isRequired() &&  ( !self.fieldValue || self.field.val() === '' ) ) {
//
//          self.hasErrors = 1
//          self.outputError(MF.strings.required_error)
//          return false
//        }
//      }
//
//
//      // validate data based on validation type provided in HTML's data attribute
//      var errorMsg = ''
//      switch (self.validationType) {
//        case 'email' :
//          var regex = /[a-z0-9\._%+!$&*=^|~#%'`?{}/\-]+@([a-z0-9\-]+\.){1,}([a-z]{2,16})/
//
//          if (!self.fieldValue.match(regex)) {
//            self.hasErrors = 1
//            errorMsg = MF.strings.email_error
//          }
//          break
//
//        case 'date' :
//
//          var formatToRegex = {
//            'dd/mm/yy': /\d{2}\/\d{2}\/\d{4}/,
//            'dd-mm-yy': /\d{2}\-\d{2}\-\d{4}/,
//            'dd.mm.yy': /\d{2}\.\d{2}\.\d{4}/,
//            'mm/dd/yy': /\d{2}\/\d{2}\/\d{4}/,
//            'mm-dd-yy': /\d{2}\-\d{2}\-\d{4}/,
//            'mm.dd.yy': /\d{2}\.\d{2}\.\d{4}/,
//            'yy-mm-dd': /\d{4}\-\d{2}\-\d{2}/,
//            'yy/mm/dd': /\d{4}\/\d{2}\/\d{2}/,
//            'yy.mm.dd': /\d{4}\.\d{2}\.\d{2}/
//          }
//
//          var regex = formatToRegex[ self.parent.data('format') ] || /\d{2}\/\d{2}\/\d{4}/
//
//          if (!self.fieldValue.match(regex) && ( $('.datepicker').val().length !== 0)) {
//
//            self.hasErrors = 1
//            errorMsg = MF.strings.date_format_error
//          }
//
//          break
//      }

      if (self.hasErrors) {
        self.outputError(self.getErrorMsg(self.field.attr('id'), errorMsg))
        return false;
      }

      return true;
    }

    /**
     * Gets current value from field or set of fields according to field type
     */
    self.getFieldValue = function () {
      switch (self.validationType) {
        case 'checkboxes':
          var vals = []
          self.parent.find('input:checked').each(function () {
            vals.push($(this).val())
          })
          self.fieldValue = vals.join(',')
          break
        case 'radio':
          self.fieldValue = self.parent.find('input:checked').first().val()
          break
        default:
          self.fieldValue = self.field.val()
          break
      }
    }

    /**
     * Checks if field element is marked as required in HTML
     */
    self.isRequired = function () {
      if (self.field.prop('required') || self.parent.hasClass('mf-required')) {
        return true
      }

      return false
    }

    /**
     * Gets error message, customized if possible. Strings are passed through wp_localize_script in shortcode callback.
     *
     * 1. Looks for field's custom message if set in form WP admin screen (passed in MF_ERR global),
     * 2. First fallback is a string provided as function param
     * 3. Second fallback: generic localized string in MF global,
     * 3. Ultimate fallback: hardcoded english string. Lo siento pero no comprendo, señor.
     */
    self.getErrorMsg = function (fieldId, defaultMsg) {

      var formConfig = configMF()

      if (!formConfig.errors || !formConfig.errors[fieldId]) {
        // Fallback: return msg probivided as param
        if (defaultMsg) {
          return defaultMsg
        }

        // Fallback: return hardcoded value if nothing else is present
        if (!MF || !MF.strings || !MF.strings.default_error) {
          return 'This field\'s value is invalid!' // Default hardcoded message, displayed only if wp_localize_script() fails
        }

        // Return localized default message if present
        return MF.strings.default_error
      }

      return formConfig.errors[fieldId]
    }

    /**
     * Adds error classes to HTML and prints span element with custom error message
     */
    self.outputError = function (msg) {

//      if ( (self.parent).hasClass('mf_field--checkboxes')
//        || (self.parent).hasClass('mf_field--radios')
//      ) {
//
//      fieldVal = self.parent.attr('id')
//
//      } else if( (self.parent).hasClass('mf_field--file') ) {
//
//        fieldVal = self.field.attr('name')
//      } else if( (self.parent).hasClass('mf_field--multiselect') ) {
//
//        fieldVal = self.parent.attr('name')
//
//      } else {
//
//        fieldVal = self.field.attr('id')
//      }
//
//      var errorEl = $('<span>', {
//        class: 'mf_error',
//        text: self.getErrorMsg(fieldVal)
//      })
//
//      self.field.addClass('mf_error_shadow')
//      self.parent.addClass('mf_has_errors')
//      self.formEl.addClass('mf_has_errors')
//
//      errorEl.appendTo(self.parent);
    }

    /**
     * Resets error messages and validator state
     */
    self.cleanErrors = function () {
      self.parent.removeClass('mf_has_errors')
      self.formEl.removeClass('mf_has_errors')
      self.field.removeClass('mf_error_shadow')
      self.parent.find('.mf_error').remove()
      self.hasErrors = 0
    }

    $('.mf_form__form').on('submit', function () {
       self.validate();
    })
  }()

  // KICK IT OFF!

  // Init main controller on every form on the page
  $('.mf_form__form').each(function () {
    MacsForms.init($(this));
  })

  // Init validator when field's value change
  $('.mf_field input, .mf_field textarea, .mf_field select, .mf_field ul li radio, .mf_fileupload_callback_id').on('on change', function (e) {
      if($(this).val !== ""){
        var check = MFValidator.init($(this))
      }

    })

  $( 'body' ).delegate( '.mf-datepicker', 'focusin', function(){

    var $this = $(this);

    $this.datepicker( {
      dateFormat: $(this).data('format'),
      changeYear: true,
      changeMonth: true,
      yearRange: '-100:+100',
    } );

  } );

// TODO add as main controller's method

  function resizeForms () {
    $('.mf_form__form select').each(function () {
      var newWidth = $(this).width()
      if (newWidth === lastWindowWidth) {
        return
      }
      lastWindowWidth = newWidth

      var $form = $(this).parents('.mf_form__form')

      $(this).select2('destroy')
      $(this).width($(this).parent().width())
      $(this).select2({ dropdownParent: $form })

      $('select', $form).attr('aria-hidden', false)
      $('.select2', $form).attr('aria-hidden', true)
    })
    $('.popup__overlay').find('select').each(function () {
      $(this).select2()
    })
  }

  var lastWindowWidth = $(window).width()
  $(window).resize(lodash.debounce(resizeForms, 100))

  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  let macForms = document.querySelectorAll( '.needs-validation' );

  // Loop over forms and prevent submission.
  Array.prototype.slice.call( macForms )
     .forEach( function ( form ) {
         form.addEventListener( 'submit', function ( event ) {

             if ( ! form.checkValidity() ) {

                 event.preventDefault();
                 event.stopPropagation();
             }

             form.classList.add( 'was-validated' );

         }, false );
     } );

})

$(function(){
  var requiredCheckboxes = $('.checkboxrequired :checkbox[required]');
  requiredCheckboxes.change(function(){
      if(requiredCheckboxes.is(':checked')) {
          requiredCheckboxes.removeAttr('required');
      } else {
          requiredCheckboxes.attr('required', 'required');
      }
  });
});

// Check to see if statistical cookies have been accepted by the user and if so, populate the UTM fields.

document.addEventListener('DOMContentLoaded', function() {

  if (statisticalCookiesAccepted()) {
      initializeUtmFields();
  }

});

function statisticalCookiesAccepted() {
  var cmapiCookieValue = null;
  var macsCookieValue = null;
  var cookies = document.cookie.split(';');

  for (var i = 0; i < cookies.length; i++) {
      var cookie = cookies[i].trim();
      if (cookie.indexOf('cmapi_cookie_privacy=') === 0) {
          cmapiCookieValue = cookie.split('=')[1];
      }
      // MACS
      if (/^macs_cookies_statistics_\d+=/.test(cookie)) {
          macsCookieValue = cookie.split('=')[1];
      }
      // TrustArc
      if (cmapiCookieValue || macsCookieValue == '1') {
          break;
      }
  } 

  return (cmapiCookieValue && cmapiCookieValue.indexOf('3') !== -1) || macsCookieValue == '1';
}

// Using window.location.search safely with URLSearchParams to parse query parameters
function initializeUtmFields() {
  // phpcs:ignore WordPressVIPMinimum.JS.Window.location
  let urlParams = new URLSearchParams(window.location.search);
  for (let param of urlParams.entries()) {
      let key = param[0].toLowerCase(); // Convert param to lowercase to match the pattern
      let inputId = ""; // Initialize inputId as empty

      // Hardcoding the ID assignment based on the key
      if (key === "utm_source") {
          inputId = utmSourceInputId; 
      }
      if (key === "utm_medium") {
          inputId = utmMediumInputId; 
      }
      if (key === "utm_content") {
          inputId = utmContentInputId; 
      }
      if (key === "utm_campaign") {
          inputId = utmCampaignInputId; 
      }

      if (inputId) { 
          let inputElement = document.getElementById(inputId);
          if (inputElement) {
              inputElement.value = urlParams.get(key);
              console.log('Value set for', inputId, ':', urlParams.get(key));
          }
      }
  }
}

/********** Captcha slider button *********************/
$(function(){
  var initialMouse = 0;
  var slideMovementTotal = 0;
  var mouseIsDown = false;
  var slider = $('.mf_field--submit').find('#slider');
  var currentForm;

  slider.on('mousedown touchstart', function(event){	
    currentForm = $(this).closest('.mf_form__form').attr('id');  
    slider = $(`#${currentForm}`).find('#button-background > #slider');
    mouseIsDown = true;
    slideMovementTotal = $('#button-background').width() - $(this).width() + 10;
    initialMouse = event.clientX || event.originalEvent.touches[0].pageX;
  });


  $(document.body, '#slider').on('mouseup touchend', function (event) {	
    if (!mouseIsDown)
      return;
    mouseIsDown = false;	
    var currentMouse = event.clientX || event.changedTouches[0].pageX;
    var relativeMouse = currentMouse - initialMouse;	
    if (relativeMouse < slideMovementTotal) {
      $(`#${currentForm}`).find('.slide-text').fadeTo(300, 1);
      slider.animate({
        left: "-10px"
      }, 300);
      return;
    }
    // Simulating a successful submission after swipe is done
    var submitted_state = $(`#${currentForm}`).find('#submitted_state_txt').val();
    $(`#${currentForm}`).find('.slide-text').text(submitted_state); // Change the text to "Submitted"
    $(`#${currentForm}`).find('.arrow-icon').text('check'); // Change the arrow to a checkmark icon

    // Change the icon to a tick mark when the submission is successful
    $(`#${currentForm}`).find('.tick-icon').removeClass('bi bi-arrow-right').addClass('bi bi-check2'); // Change the class from arrow to the check mark

    // Change the icon to a tick mark when the submission is successful
      $(`#${currentForm}`).find('.arrow-icon').addClass('d-none'); // Hide the arrow icon
      $(`#${currentForm}`).find('.tick-icon').removeClass('d-none'); // Show the tick mark icon
      
      // Additional styling if needed for the tick icon
      $(`#${currentForm}`).find('.tick-icon').css({
        'font-size': '30px', // Adjust the size as needed
        'color': '#fff' // Change the color to your desired color
      });

      setTimeout(() => {          
        if(!$(`#${currentForm}`)[0].checkValidity()){
          $(`#${currentForm}`).addClass('was-validated');
        } 
        $(`#${currentForm}`).trigger('submit');
      }, "1000");
      

      // Check if the text in .slide-text is "Submitted"		
      if ($(`#${currentForm}`).find('.slide-text').text().trim() === submitted_state) {			
        slider.addClass('submitted'); // Add a class 'submitted' to the #slider div
      }
      
    
    //slider.addClass('unlocked');
    $('#locker').text('lock_outline');
    setTimeout(function(){
      slider.on('click tap', function(event){
        if (!slider.hasClass('unlocked'))
          return;
        slider.removeClass('unlocked');
        $('#locker').text('lock_open');
        slider.off('click tap');
      });
    }, 0);
  });

  $(document.body).on('mousemove touchmove', function(event){	
    if (!mouseIsDown)
      return;
      
    var currentMouse = event.clientX || event.originalEvent.touches[0].pageX;
    var relativeMouse = currentMouse - initialMouse;
    var slidePercent = relativeMouse / slideMovementTotal; // Calculate the slide percentage properly
    
    // Check and adjust the slidePercent within the range of 0 to 1
    slidePercent = Math.max(0, Math.min(1, slidePercent));
    
    $(`#${currentForm}`).find('.slide-text').fadeTo(0, slidePercent);
    
    if (relativeMouse <= 0) {
      slider.css({'left': '-10px'});
      return;
    }
    

    if (relativeMouse >= slideMovementTotal + 10) {		
      slider.css({'left': slideMovementTotal + 'px'});
      return;
    }
    slider.css({'left': relativeMouse - 10});
    });
});
function validateInput(input){
  input.value=input.value.replace(/[^0-9+-]/g,'');
 if (input.value.length > 14) {
  input.value = input.value.slice(0, 14);
}
}

$(function(){
  
  $('select').on('select2:select',function(e){     
    
    if($(this).attr('multiple')){ 
      if(e.params.data.text === 'All'){        
        $(this).find('option').prop( "selected","selected" );
        $(this).trigger("change");      
        setTimeout(() => { 
          let selectedValues = [];
        let filterOptions = $('.select2-results__options').children();
        filterOptions.attr('aria-selected', 'false');
        filterOptions.removeClass('select2-results__option--highlighted');        
        $('.select2-selection__choice').each(function () {
          var option_text = $(this).first().contents().filter(function() {
            return this.nodeType == 3;
          }).text();
          selectedValues.push(option_text.trim());
         
        });
        }, 100);
      }
       
    }
  })

  $('select').on('select2:unselect',function(e){         
    if($(this).attr('multiple')){ 
      if(e.params.data.text === 'All' && e.params.data.selected === true){        
        $(this).find('option').prop( "selected","selected" );
        $(this).trigger("change");      
        setTimeout(() => { 
          let selectedValues = [];
        let filterOptions = $('.select2-results__options').children();
        filterOptions.attr('aria-selected', 'false');
        filterOptions.removeClass('select2-results__option--highlighted');        
        $('.select2-selection__choice').each(function () {
          var option_text = $(this).first().contents().filter(function() {
            return this.nodeType == 3;
          }).text();
          selectedValues.push(option_text.trim());
         
        });
        }, 100);
      }else if(e.params.data.text === 'All' && e.params.data.selected === false){
        $(this).find('option').prop( "selected","" );
        $(this).trigger("change");      
      }
       
    }
  })

  
})

$(document).on('click', '.select2-selection--multiple', function (e) {
   
   e.preventDefault();
    let selectedValues = [];
    let filterOptions = $('.select2-results__options').children();
    filterOptions.attr('aria-selected', 'false');
    filterOptions.removeClass('select2-results__option--highlighted');
    
    $('.select2-selection__choice').each(function () {
      var option_text = $(this).first().contents().filter(function() {
        return this.nodeType == 3;
      }).text();
      selectedValues.push(option_text.trim());
      
    });

    filterOptions.each(function(){
      let text = $(this).text().trim();     
      if (selectedValues.includes(text)) {        
       setTimeout(() => {
          $(this).addClass('select2-results__option--highlighted');
          $(this).attr('aria-selected', 'true');
      }, 50);
        
      }
    })  
});

// Add validation for Capgemini email field. 
// Ensure the capgemini email field only accepts addresses ending with @capgemini.com.
$('.mf_form__form input.capgemini-email').on('blur', validateCapgeminiEmail);
$('.mf_form__form').on('submit', function(event) {
    if (!validateCapgeminiEmail()) {
        event.preventDefault(); 
    }
});
function validateCapgeminiEmail() {
    var emailInput = $('.mf_form__form input.capgemini-email');
    var email = emailInput.val();
    var domain = 'capgemini.com';
    var emailPattern = new RegExp('^[a-zA-Z0-9._%+-]+@' + domain + '$', 'i');
    var errorMessage = emailInput.siblings('.invalid-feedback');
    if (email === '') {
        errorMessage.text('Capgemini Email is not valid');
        errorMessage.css('visibility', 'visible');
        emailInput.css('border', '1px solid red'); 
        $('#slider').hide();
        return false;
    } else if (!emailPattern.test(email)) {
        errorMessage.text('Please enter a valid Capgemini email address.');
        errorMessage.attr('style', 'visibility: visible !important; color: red;');
        emailInput.css('border', '1px solid red'); 
        $('#slider').hide();
        return false;
    } else {
        errorMessage.text('');
        errorMessage.css('visibility', 'hidden');
        emailInput.css('border', ''); 
        $('#slider').show();
        return true;
    }
}